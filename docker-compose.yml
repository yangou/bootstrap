version: '3'

services:
  dynamo:
    image: amazon/dynamodb-local:1.11.119
    container_name: dynamo
    restart: always
    ports:
      - 8000:8000
    volumes:
      - '${data}/dynamo:/var/dynamo'
    command: -jar DynamoDBLocal.jar -dbPath /var/dynamo -sharedDb -port 8000
  mysql:
    image: mysql:8.0.13
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 3306:3306
    volumes:
      - '${data}/mysql:/var/lib/mysql'
  postgres:
    image: postgres:11.1
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - '${data}/postgres:/var/lib/postgresql/data'
  nsqlookupd:
    image: nsqio/nsq:v1.1.0
    container_name: nsqlookupd
    restart: always
    ports:
      - 4161:4161
    volumes:
      - '${data}/nsqlookupd:/var/nsq'
    command: nsqlookupd -http-address=0.0.0.0:4161
  nsqd:
    image: nsqio/nsq:v1.1.0
    container_name: nsqd
    restart: always
    links:
      - nsqlookupd
    ports:
      - 4151:4151
      - 4150:4150
    volumes:
      - '${data}/nsqd:/var/nsq'
    command: nsqd -lookupd-tcp-address=nsqlookupd:4160 -http-address=0.0.0.0:4151 -tcp-address=0.0.0.0:4150 -node-id=1 -data-path=/var/nsq -broadcast-address=nsqd
  nsqadmin:
    image: nsqio/nsq:v1.1.0
    container_name: nsqadmin
    restart: always
    links:
      - nsqlookupd
      - nsqd
    ports:
      - 4171:4171
    volumes:
      - '${data}/nsqadmin:/var/nsq'
    command: nsqadmin -lookupd-http-address=nsqlookupd:4161 -http-address=0.0.0.0:4171
  elasticsearch:
    image: elasticsearch:6.5.1
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
    volumes:
      - '${data}/elasticsearch:/usr/share/elasticsearch/data'
  cassandra:
    image: cassandra:3.11.3
    container_name: cassandra
    restart: always
    ports:
      - 9042:9042
    volumes:
      - '${data}/cassandra:/var/lib/cassandra'
  redis:
    image: redis:5.0.2
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - '${data}/redis:/data'
  consul:
    image: consul:1.4.0
    container_name: consul
    restart: always
    ports:
      - 8500:8500
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.1
    container_name: zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - 2181:2181
    volumes:
      - '${data}/zookeeper/data:/var/lib/zookeeper/data'
      - '${data}/zookeeper/log:/var/lib/zookeeper/log'
  kafka-broker:
    image: confluentinc/cp-kafka:5.0.1
    container_name: kafka-broker
    restart: always
    links:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - 9092:9092
    volumes:
      - '${data}/kafka/data:/var/lib/kafka/data'
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:5.0.1
    container_name: kafka-schema-registry
    hostname: kafka-schema-registry
    restart: always
    links:
      - zookeeper
      - kafka-broker
    ports:
      - 8081:8081
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_HOST_NAME=kafka-schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:5.0.1
    container_name: kafka-rest-proxy
    hostname: kafka-rest-proxy
    restart: always
    links:
      - zookeeper
      - kafka-broker
      - kafka-schema-registry
    ports:
      - 8082:8082
    environment:
      - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_REST_LISTENERS=http://0.0.0.0:8082
      - KAFKA_REST_SCHEMA_REGISTRY_URL=http://kafka-schema-registry:8081
      - KAFKA_REST_HOST_NAME=kafka-rest-proxy
  ksql-server:
    image: confluentinc/cp-ksql-server:5.0.1
    container_name: ksql-server
    hostname: ksql-server
    restart: always
    links:
      - zookeeper
      - kafka-broker
      - kafka-schema-registry
    ports:
      - 8088:8088
    environment:
      - KSQL_HOST_NAME=ksql-server
      - KSQL_CONFIG_DIR=/etc/ksql
      - KSQL_LOG4J_OPTS=-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties
      - KSQL_BOOTSTRAP_SERVERS=kafka-broker:9092
      - KSQL_LISTENERS=http://0.0.0.0:8088
      - KSQL_CACHE_MAX_BYTES_BUFFERING=0
      - KSQL_KSQL_SCHEMA_REGISTRY_URL=http://kafka-schema-registry:8081
      - KSQL_PRODUCER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      - KSQL_CONSUMER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
  kafka:
    image: confluentinc/cp-ksql-cli:5.0.1
    container_name: kafka
    restart: 'no'
    depends_on:
      - zookeeper
      - kafka-broker
      - kafka-schema-registry
      - kafka-rest-proxy
      - ksql-server
    entrypoint: echo kafka started.
